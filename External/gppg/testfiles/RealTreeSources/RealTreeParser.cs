// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, QUT 2005-2010
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.4.7
// Machine:  RADNOR-3
// DateTime: 27/03/2012 6:19:37 PM
// UserName: john
// Input file <RealTreeClient.y - 27/03/2012 11:18:14 AM>

// options: no-lines diagnose & report

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace RealTree
{
internal enum Tokens {error=62,EOF=63,LITERAL=64,LETTER=65,PRINT=66,
    EVAL=67,RESET=68,EXIT=69,HELP=70,EOL=71,UMINUS=72};

internal partial class Parser: ShiftReduceParser<RealTree.Node, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliasses;
#pragma warning restore 649
  private static Rule[] rules = new Rule[23];
  private static State[] states = new State[38];
  private static string[] nonTerms = new string[] {
      "list", "$accept", "stat", "expr", };

  static Parser() {
    states[0] = new State(-2,new int[]{-1,1});
    states[1] = new State(new int[]{63,2,62,5,70,7,68,8,66,9,69,10,67,11,64,34,65,35,71,-5},new int[]{-3,3});
    states[2] = new State(-1);
    states[3] = new State(new int[]{71,4});
    states[4] = new State(-3);
    states[5] = new State(new int[]{71,6});
    states[6] = new State(-4);
    states[7] = new State(-6);
    states[8] = new State(-7);
    states[9] = new State(-8);
    states[10] = new State(-9);
    states[11] = new State(new int[]{40,23,67,26,65,30,64,31,45,32},new int[]{-4,12});
    states[12] = new State(new int[]{42,13,47,15,37,17,43,19,45,21,71,-10});
    states[13] = new State(new int[]{40,23,67,26,65,30,64,31,45,32},new int[]{-4,14});
    states[14] = new State(-15);
    states[15] = new State(new int[]{40,23,67,26,65,30,64,31,45,32},new int[]{-4,16});
    states[16] = new State(-16);
    states[17] = new State(new int[]{40,23,67,26,65,30,64,31,45,32},new int[]{-4,18});
    states[18] = new State(-17);
    states[19] = new State(new int[]{40,23,67,26,65,30,64,31,45,32},new int[]{-4,20});
    states[20] = new State(new int[]{42,13,47,15,37,17,43,-18,45,-18,71,-18,41,-18});
    states[21] = new State(new int[]{40,23,67,26,65,30,64,31,45,32},new int[]{-4,22});
    states[22] = new State(new int[]{42,13,47,15,37,17,43,-19,45,-19,71,-19,41,-19});
    states[23] = new State(new int[]{40,23,67,26,65,30,64,31,45,32},new int[]{-4,24});
    states[24] = new State(new int[]{41,25,42,13,47,15,37,17,43,19,45,21});
    states[25] = new State(-13);
    states[26] = new State(new int[]{40,27});
    states[27] = new State(new int[]{40,23,67,26,65,30,64,31,45,32},new int[]{-4,28});
    states[28] = new State(new int[]{41,29,42,13,47,15,37,17,43,19,45,21});
    states[29] = new State(-14);
    states[30] = new State(-20);
    states[31] = new State(-21);
    states[32] = new State(new int[]{40,23,67,26,65,30,64,31,45,32},new int[]{-4,33});
    states[33] = new State(-22);
    states[34] = new State(-11);
    states[35] = new State(new int[]{61,36});
    states[36] = new State(new int[]{40,23,67,26,65,30,64,31,45,32},new int[]{-4,37});
    states[37] = new State(new int[]{42,13,47,15,37,17,43,19,45,21,71,-12});

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,63});
    rules[2] = new Rule(-1, new int[]{});
    rules[3] = new Rule(-1, new int[]{-1,-3,71});
    rules[4] = new Rule(-1, new int[]{-1,62,71});
    rules[5] = new Rule(-3, new int[]{});
    rules[6] = new Rule(-3, new int[]{70});
    rules[7] = new Rule(-3, new int[]{68});
    rules[8] = new Rule(-3, new int[]{66});
    rules[9] = new Rule(-3, new int[]{69});
    rules[10] = new Rule(-3, new int[]{67,-4});
    rules[11] = new Rule(-3, new int[]{64});
    rules[12] = new Rule(-3, new int[]{65,61,-4});
    rules[13] = new Rule(-4, new int[]{40,-4,41});
    rules[14] = new Rule(-4, new int[]{67,40,-4,41});
    rules[15] = new Rule(-4, new int[]{-4,42,-4});
    rules[16] = new Rule(-4, new int[]{-4,47,-4});
    rules[17] = new Rule(-4, new int[]{-4,37,-4});
    rules[18] = new Rule(-4, new int[]{-4,43,-4});
    rules[19] = new Rule(-4, new int[]{-4,45,-4});
    rules[20] = new Rule(-4, new int[]{65});
    rules[21] = new Rule(-4, new int[]{64});
    rules[22] = new Rule(-4, new int[]{45,-4});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
    switch (action)
    {
      case 4: // list -> list, error, EOL
{ yyerrok(); }
        break;
      case 6: // stat -> HELP
{ this.PrintHelp(); }
        break;
      case 7: // stat -> RESET
{ this.ClearRegisters(); }
        break;
      case 8: // stat -> PRINT
{ this.PrintRegisters(); }
        break;
      case 9: // stat -> EXIT
{ this.CallExit(); }
        break;
      case 10: // stat -> EVAL, expr
{ this.Display(ValueStack[ValueStack.Depth-1]); }
        break;
      case 11: // stat -> LITERAL
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 12: // stat -> LETTER, '=', expr
{ this.AssignExpression(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 13: // expr -> '(', expr, ')'
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
        break;
      case 14: // expr -> EVAL, '(', expr, ')'
{ CurrentSemanticValue = MakeConstLeaf(Eval(ValueStack[ValueStack.Depth-2])); }
        break;
      case 15: // expr -> expr, '*', expr
{ CurrentSemanticValue = MakeBinary(NodeTag.mul, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 16: // expr -> expr, '/', expr
{ CurrentSemanticValue = MakeBinary(NodeTag.div, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 17: // expr -> expr, '%', expr
{ CurrentSemanticValue = MakeBinary(NodeTag.rem, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 18: // expr -> expr, '+', expr
{ CurrentSemanticValue = MakeBinary(NodeTag.plus, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 19: // expr -> expr, '-', expr
{ CurrentSemanticValue = MakeBinary(NodeTag.minus, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 22: // expr -> '-', expr
{
				CurrentSemanticValue = MakeUnary(NodeTag.negate, ValueStack[ValueStack.Depth-1]);
			}
        break;
    }
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliasses != null && aliasses.ContainsKey(terminal))
        return aliasses[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

/*
 * All the code is in the helper file RealTreeHelper.cs
 */ 

}
}
