// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  ULKYOME-PC
// DateTime: 18.09.2023 09:16:47
// UserName: Ulkyome
// Input file <E:\source\repos\BG3_Tran\LSLib\\LS\Stats\Parser\StatProperty.yy - 18.08.2023 04:17:07>

// options: lines

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace LSLib.LS.Stats.Properties
{
public enum StatPropertyTokens {error=126,
    EOF=127,EXPR_PROPERTIES=128,EXPR_CONDITIONS=129,EXPR_REQUIREMENTS=130,REQUIREMENT_TAG=131,IF=132,
    CTX_SELF=133,CTX_TARGET=134,CTX_AOE=135,CTX_ON_HIT=136,CTX_ON_EQUIP=137,ACT_CUSTOM_PROPERTY=138,
    ACT_SURFACE_CHANGE=139,ACT_GAME_ACTION=140,ACT_CREATE_SURFACE=141,ACT_SWAP_PLACES=142,ACT_EQUALIZE=143,ACT_PICKUP=144,
    ACT_RESURRECT=145,ACT_SABOTAGE=146,ACT_SUMMON=147,ACT_FORCE=148,ACT_CLEANSE=149,ACT_AOEBOOST=150,
    ACT_SURFACEBOOST=151,BAD=152,NAME=153,INTEGER=154,TEXT=155};

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public partial class StatPropertyParser: ShiftReduceParser<System.Object, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[129];
  private static State[] states = new State[189];
  private static string[] nonTerms = new string[] {
      "Root", "$accept", "Properties", "Conditions", "Requirements", "UnaryRequirement", 
      "Requirement", "Property", "PropContext", "PropCondition", "PropAction", 
      "PropSelfContext", "ConditionExpr", "ActCustomProperty", "ActSurfaceChange", 
      "ActGameAction", "ActCreateSurface", "ActSwapPlaces", "ActPickup", "ActEqualize", 
      "ActResurrect", "ActSabotage", "ActSummon", "ActForce", "ActCleanse", "ActStatus", 
      "SurfaceChangeArgs", "GameActionArgs", "CreateSurfaceArgs", "SwapPlacesArgs", 
      "PickupArgs", "TextArg", "ResurrectArgs", "SabotageArgs", "SummonOptArgs", 
      "IntArg", "StatusBoost", "StatusName", "StatusArgs", "OptionalIntArg", 
      "OptionalTextArg", "SurfaceList", "Surface", "Condition", "UnaryCondition", 
      "ConditionBlock", "UnaryOperator", "BracketedConditionExpr", "BinaryOperator", 
      };

  static StatPropertyParser() {
    states[0] = new State(new int[]{128,3,129,173,130,176},new int[]{-1,1});
    states[1] = new State(new int[]{127,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{133,162,134,168,135,170,59,-15,127,-15,132,-20,138,-20,139,-20,140,-20,141,-20,142,-20,144,-20,143,-20,145,-20,146,-20,147,-20,148,-20,149,-20,150,-20,151,-20,153,-20},new int[]{-3,4,-8,172,-9,7});
    states[4] = new State(new int[]{59,5,127,-2});
    states[5] = new State(new int[]{133,162,134,168,135,170,59,-17,127,-17,132,-20,138,-20,139,-20,140,-20,141,-20,142,-20,144,-20,143,-20,145,-20,146,-20,147,-20,148,-20,149,-20,150,-20,151,-20,153,-20},new int[]{-8,6,-9,7});
    states[6] = new State(-18);
    states[7] = new State(new int[]{132,138,138,-27,139,-27,140,-27,141,-27,142,-27,144,-27,143,-27,145,-27,146,-27,147,-27,148,-27,149,-27,150,-27,151,-27,153,-27},new int[]{-10,8});
    states[8] = new State(new int[]{138,11,139,13,140,26,141,45,142,58,144,69,143,78,145,82,146,89,147,94,148,105,149,109,150,127,151,129,153,-107},new int[]{-11,9,-14,10,-15,12,-16,25,-17,44,-18,57,-19,68,-20,77,-21,81,-22,88,-23,93,-24,104,-25,108,-26,112,-37,113});
    states[9] = new State(-19);
    states[10] = new State(-29);
    states[11] = new State(-42);
    states[12] = new State(-30);
    states[13] = new State(new int[]{44,15,59,-55,127,-55},new int[]{-27,14});
    states[14] = new State(-43);
    states[15] = new State(new int[]{154,23},new int[]{-36,16});
    states[16] = new State(new int[]{44,17,59,-56,127,-56});
    states[17] = new State(new int[]{154,23,44,-97,59,-97,127,-97},new int[]{-40,18,-36,24});
    states[18] = new State(new int[]{44,19,59,-57,127,-57});
    states[19] = new State(new int[]{154,23},new int[]{-36,20});
    states[20] = new State(new int[]{44,21,59,-58,127,-58});
    states[21] = new State(new int[]{154,23},new int[]{-36,22});
    states[22] = new State(-59);
    states[23] = new State(-96);
    states[24] = new State(-98);
    states[25] = new State(-31);
    states[26] = new State(new int[]{44,28,59,-60,127,-60},new int[]{-28,27});
    states[27] = new State(-44);
    states[28] = new State(new int[]{154,23},new int[]{-36,29});
    states[29] = new State(new int[]{44,30,59,-61,127,-61});
    states[30] = new State(new int[]{154,23,44,-97,59,-97,127,-97},new int[]{-40,31,-36,24});
    states[31] = new State(new int[]{44,32,59,-62,127,-62});
    states[32] = new State(new int[]{154,39,153,40,155,41,139,42,131,43,44,-104,59,-104,127,-104},new int[]{-41,33,-32,38});
    states[33] = new State(new int[]{44,34,59,-63,127,-63});
    states[34] = new State(new int[]{154,23},new int[]{-36,35});
    states[35] = new State(new int[]{44,36,59,-64,127,-64});
    states[36] = new State(new int[]{154,23,59,-97,127,-97},new int[]{-40,37,-36,24});
    states[37] = new State(-65);
    states[38] = new State(-105);
    states[39] = new State(-99);
    states[40] = new State(-100);
    states[41] = new State(-101);
    states[42] = new State(-102);
    states[43] = new State(-103);
    states[44] = new State(-32);
    states[45] = new State(new int[]{44,47,59,-66,127,-66},new int[]{-29,46});
    states[46] = new State(-45);
    states[47] = new State(new int[]{154,23},new int[]{-36,48});
    states[48] = new State(new int[]{44,49,59,-67,127,-67});
    states[49] = new State(new int[]{154,23,44,-97,59,-97,127,-97},new int[]{-40,50,-36,24});
    states[50] = new State(new int[]{44,51,59,-68,127,-68});
    states[51] = new State(new int[]{154,39,153,40,155,41,139,42,131,43,44,-104,59,-104,127,-104},new int[]{-41,52,-32,38});
    states[52] = new State(new int[]{44,53,59,-69,127,-69});
    states[53] = new State(new int[]{154,23},new int[]{-36,54});
    states[54] = new State(new int[]{44,55,59,-70,127,-70});
    states[55] = new State(new int[]{154,23,59,-97,127,-97},new int[]{-40,56,-36,24});
    states[56] = new State(-71);
    states[57] = new State(-33);
    states[58] = new State(new int[]{44,60,59,-72,127,-72},new int[]{-30,59});
    states[59] = new State(-46);
    states[60] = new State(new int[]{154,23,44,-97,59,-97,127,-97},new int[]{-40,61,-36,24});
    states[61] = new State(new int[]{44,62,59,-73,127,-73});
    states[62] = new State(new int[]{154,23,44,-97,59,-97,127,-97},new int[]{-40,63,-36,24});
    states[63] = new State(new int[]{44,64,59,-74,127,-74});
    states[64] = new State(new int[]{154,39,153,40,155,41,139,42,131,43,58,-104,59,-104,127,-104},new int[]{-41,65,-32,38});
    states[65] = new State(new int[]{58,66,59,-75,127,-75});
    states[66] = new State(new int[]{154,39,153,40,155,41,139,42,131,43,59,-104,127,-104},new int[]{-41,67,-32,38});
    states[67] = new State(-76);
    states[68] = new State(-34);
    states[69] = new State(new int[]{44,71,59,-77,127,-77},new int[]{-31,70});
    states[70] = new State(-47);
    states[71] = new State(new int[]{154,23,44,-97,59,-97,127,-97},new int[]{-40,72,-36,24});
    states[72] = new State(new int[]{44,73,59,-78,127,-78});
    states[73] = new State(new int[]{154,23,44,-97,59,-97,127,-97},new int[]{-40,74,-36,24});
    states[74] = new State(new int[]{44,75,59,-79,127,-79});
    states[75] = new State(new int[]{154,39,153,40,155,41,139,42,131,43,59,-104,127,-104},new int[]{-41,76,-32,38});
    states[76] = new State(-80);
    states[77] = new State(-35);
    states[78] = new State(new int[]{44,79});
    states[79] = new State(new int[]{154,39,153,40,155,41,139,42,131,43},new int[]{-32,80});
    states[80] = new State(-48);
    states[81] = new State(-36);
    states[82] = new State(new int[]{44,84,59,-81,127,-81},new int[]{-33,83});
    states[83] = new State(-49);
    states[84] = new State(new int[]{154,23},new int[]{-36,85});
    states[85] = new State(new int[]{44,86,59,-82,127,-82});
    states[86] = new State(new int[]{154,23},new int[]{-36,87});
    states[87] = new State(-83);
    states[88] = new State(-37);
    states[89] = new State(new int[]{44,91,59,-84,127,-84},new int[]{-34,90});
    states[90] = new State(-50);
    states[91] = new State(new int[]{154,23},new int[]{-36,92});
    states[92] = new State(-85);
    states[93] = new State(-38);
    states[94] = new State(new int[]{44,95});
    states[95] = new State(new int[]{154,39,153,40,155,41,139,42,131,43},new int[]{-32,96});
    states[96] = new State(new int[]{44,98,59,-86,127,-86},new int[]{-35,97});
    states[97] = new State(-51);
    states[98] = new State(new int[]{154,23},new int[]{-36,99});
    states[99] = new State(new int[]{44,100,59,-87,127,-87});
    states[100] = new State(new int[]{154,39,153,40,155,41,139,42,131,43,44,-104,59,-104,127,-104},new int[]{-41,101,-32,38});
    states[101] = new State(new int[]{44,102,59,-88,127,-88});
    states[102] = new State(new int[]{154,39,153,40,155,41,139,42,131,43},new int[]{-32,103});
    states[103] = new State(-89);
    states[104] = new State(-39);
    states[105] = new State(new int[]{44,106});
    states[106] = new State(new int[]{154,23},new int[]{-36,107});
    states[107] = new State(-52);
    states[108] = new State(-40);
    states[109] = new State(new int[]{58,110});
    states[110] = new State(new int[]{153,111});
    states[111] = new State(-53);
    states[112] = new State(-41);
    states[113] = new State(new int[]{153,126},new int[]{-38,114});
    states[114] = new State(new int[]{44,116,59,-90,127,-90},new int[]{-39,115});
    states[115] = new State(-54);
    states[116] = new State(new int[]{154,23},new int[]{-36,117});
    states[117] = new State(new int[]{44,118,59,-91,127,-91});
    states[118] = new State(new int[]{154,23,44,-97,59,-97,127,-97},new int[]{-40,119,-36,24});
    states[119] = new State(new int[]{44,120,59,-92,127,-92});
    states[120] = new State(new int[]{154,39,153,40,155,41,139,42,131,43,44,-104,59,-104,127,-104},new int[]{-41,121,-32,38});
    states[121] = new State(new int[]{44,122,59,-93,127,-93});
    states[122] = new State(new int[]{154,23},new int[]{-36,123});
    states[123] = new State(new int[]{44,124,59,-94,127,-94});
    states[124] = new State(new int[]{154,23},new int[]{-36,125});
    states[125] = new State(-95);
    states[126] = new State(-106);
    states[127] = new State(new int[]{58,128});
    states[128] = new State(-108);
    states[129] = new State(new int[]{40,130});
    states[130] = new State(new int[]{153,136},new int[]{-42,131,-43,137});
    states[131] = new State(new int[]{41,132,124,134});
    states[132] = new State(new int[]{58,133});
    states[133] = new State(-109);
    states[134] = new State(new int[]{153,136},new int[]{-43,135});
    states[135] = new State(-111);
    states[136] = new State(-112);
    states[137] = new State(-110);
    states[138] = new State(new int[]{40,139});
    states[139] = new State(new int[]{40,147,153,154,133,157,147,158,33,161},new int[]{-13,140,-45,152,-46,145,-48,146,-44,153,-47,159});
    states[140] = new State(new int[]{41,141,124,150,38,151},new int[]{-49,143});
    states[141] = new State(new int[]{58,142});
    states[142] = new State(-28);
    states[143] = new State(new int[]{40,147,153,154,133,157,147,158,33,161},new int[]{-45,144,-46,145,-48,146,-44,153,-47,159});
    states[144] = new State(-126);
    states[145] = new State(-119);
    states[146] = new State(-121);
    states[147] = new State(new int[]{40,147,153,154,133,157,147,158,33,161},new int[]{-13,148,-45,152,-46,145,-48,146,-44,153,-47,159});
    states[148] = new State(new int[]{41,149,124,150,38,151},new int[]{-49,143});
    states[149] = new State(-123);
    states[150] = new State(-127);
    states[151] = new State(-128);
    states[152] = new State(-125);
    states[153] = new State(-122);
    states[154] = new State(new int[]{58,155,41,-115,124,-115,38,-115,127,-115});
    states[155] = new State(new int[]{154,39,153,40,155,41,139,42,131,43},new int[]{-32,156});
    states[156] = new State(-118);
    states[157] = new State(-116);
    states[158] = new State(-117);
    states[159] = new State(new int[]{40,147,153,154,133,157,147,158},new int[]{-46,160,-48,146,-44,153});
    states[160] = new State(-120);
    states[161] = new State(-124);
    states[162] = new State(new int[]{58,163});
    states[163] = new State(new int[]{136,166,137,167,132,-21,138,-21,139,-21,140,-21,141,-21,142,-21,144,-21,143,-21,145,-21,146,-21,147,-21,148,-21,149,-21,150,-21,151,-21,153,-21},new int[]{-12,164});
    states[164] = new State(new int[]{58,165});
    states[165] = new State(-22);
    states[166] = new State(-25);
    states[167] = new State(-26);
    states[168] = new State(new int[]{58,169});
    states[169] = new State(-23);
    states[170] = new State(new int[]{58,171});
    states[171] = new State(-24);
    states[172] = new State(-16);
    states[173] = new State(new int[]{40,147,153,154,133,157,147,158,33,161,127,-113},new int[]{-4,174,-13,175,-45,152,-46,145,-48,146,-44,153,-47,159});
    states[174] = new State(-3);
    states[175] = new State(new int[]{124,150,38,151,127,-114},new int[]{-49,143});
    states[176] = new State(new int[]{153,181,131,183,33,186,59,-5,127,-5},new int[]{-5,177,-6,188,-7,180});
    states[177] = new State(new int[]{59,178,127,-4});
    states[178] = new State(new int[]{153,181,131,183,33,186,59,-7,127,-7},new int[]{-6,179,-7,180});
    states[179] = new State(-8);
    states[180] = new State(-9);
    states[181] = new State(new int[]{154,182,59,-11,127,-11});
    states[182] = new State(-12);
    states[183] = new State(new int[]{155,184,153,185});
    states[184] = new State(-13);
    states[185] = new State(-14);
    states[186] = new State(new int[]{153,181,131,183},new int[]{-7,187});
    states[187] = new State(-10);
    states[188] = new State(-6);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,127});
    rules[2] = new Rule(-1, new int[]{128,-3});
    rules[3] = new Rule(-1, new int[]{129,-4});
    rules[4] = new Rule(-1, new int[]{130,-5});
    rules[5] = new Rule(-5, new int[]{});
    rules[6] = new Rule(-5, new int[]{-6});
    rules[7] = new Rule(-5, new int[]{-5,59});
    rules[8] = new Rule(-5, new int[]{-5,59,-6});
    rules[9] = new Rule(-6, new int[]{-7});
    rules[10] = new Rule(-6, new int[]{33,-7});
    rules[11] = new Rule(-7, new int[]{153});
    rules[12] = new Rule(-7, new int[]{153,154});
    rules[13] = new Rule(-7, new int[]{131,155});
    rules[14] = new Rule(-7, new int[]{131,153});
    rules[15] = new Rule(-3, new int[]{});
    rules[16] = new Rule(-3, new int[]{-8});
    rules[17] = new Rule(-3, new int[]{-3,59});
    rules[18] = new Rule(-3, new int[]{-3,59,-8});
    rules[19] = new Rule(-8, new int[]{-9,-10,-11});
    rules[20] = new Rule(-9, new int[]{});
    rules[21] = new Rule(-9, new int[]{133,58});
    rules[22] = new Rule(-9, new int[]{133,58,-12,58});
    rules[23] = new Rule(-9, new int[]{134,58});
    rules[24] = new Rule(-9, new int[]{135,58});
    rules[25] = new Rule(-12, new int[]{136});
    rules[26] = new Rule(-12, new int[]{137});
    rules[27] = new Rule(-10, new int[]{});
    rules[28] = new Rule(-10, new int[]{132,40,-13,41,58});
    rules[29] = new Rule(-11, new int[]{-14});
    rules[30] = new Rule(-11, new int[]{-15});
    rules[31] = new Rule(-11, new int[]{-16});
    rules[32] = new Rule(-11, new int[]{-17});
    rules[33] = new Rule(-11, new int[]{-18});
    rules[34] = new Rule(-11, new int[]{-19});
    rules[35] = new Rule(-11, new int[]{-20});
    rules[36] = new Rule(-11, new int[]{-21});
    rules[37] = new Rule(-11, new int[]{-22});
    rules[38] = new Rule(-11, new int[]{-23});
    rules[39] = new Rule(-11, new int[]{-24});
    rules[40] = new Rule(-11, new int[]{-25});
    rules[41] = new Rule(-11, new int[]{-26});
    rules[42] = new Rule(-14, new int[]{138});
    rules[43] = new Rule(-15, new int[]{139,-27});
    rules[44] = new Rule(-16, new int[]{140,-28});
    rules[45] = new Rule(-17, new int[]{141,-29});
    rules[46] = new Rule(-18, new int[]{142,-30});
    rules[47] = new Rule(-19, new int[]{144,-31});
    rules[48] = new Rule(-20, new int[]{143,44,-32});
    rules[49] = new Rule(-21, new int[]{145,-33});
    rules[50] = new Rule(-22, new int[]{146,-34});
    rules[51] = new Rule(-23, new int[]{147,44,-32,-35});
    rules[52] = new Rule(-24, new int[]{148,44,-36});
    rules[53] = new Rule(-25, new int[]{149,58,153});
    rules[54] = new Rule(-26, new int[]{-37,-38,-39});
    rules[55] = new Rule(-27, new int[]{});
    rules[56] = new Rule(-27, new int[]{44,-36});
    rules[57] = new Rule(-27, new int[]{44,-36,44,-40});
    rules[58] = new Rule(-27, new int[]{44,-36,44,-40,44,-36});
    rules[59] = new Rule(-27, new int[]{44,-36,44,-40,44,-36,44,-36});
    rules[60] = new Rule(-28, new int[]{});
    rules[61] = new Rule(-28, new int[]{44,-36});
    rules[62] = new Rule(-28, new int[]{44,-36,44,-40});
    rules[63] = new Rule(-28, new int[]{44,-36,44,-40,44,-41});
    rules[64] = new Rule(-28, new int[]{44,-36,44,-40,44,-41,44,-36});
    rules[65] = new Rule(-28, new int[]{44,-36,44,-40,44,-41,44,-36,44,-40});
    rules[66] = new Rule(-29, new int[]{});
    rules[67] = new Rule(-29, new int[]{44,-36});
    rules[68] = new Rule(-29, new int[]{44,-36,44,-40});
    rules[69] = new Rule(-29, new int[]{44,-36,44,-40,44,-41});
    rules[70] = new Rule(-29, new int[]{44,-36,44,-40,44,-41,44,-36});
    rules[71] = new Rule(-29, new int[]{44,-36,44,-40,44,-41,44,-36,44,-40});
    rules[72] = new Rule(-30, new int[]{});
    rules[73] = new Rule(-30, new int[]{44,-40});
    rules[74] = new Rule(-30, new int[]{44,-40,44,-40});
    rules[75] = new Rule(-30, new int[]{44,-40,44,-40,44,-41});
    rules[76] = new Rule(-30, new int[]{44,-40,44,-40,44,-41,58,-41});
    rules[77] = new Rule(-31, new int[]{});
    rules[78] = new Rule(-31, new int[]{44,-40});
    rules[79] = new Rule(-31, new int[]{44,-40,44,-40});
    rules[80] = new Rule(-31, new int[]{44,-40,44,-40,44,-41});
    rules[81] = new Rule(-33, new int[]{});
    rules[82] = new Rule(-33, new int[]{44,-36});
    rules[83] = new Rule(-33, new int[]{44,-36,44,-36});
    rules[84] = new Rule(-34, new int[]{});
    rules[85] = new Rule(-34, new int[]{44,-36});
    rules[86] = new Rule(-35, new int[]{});
    rules[87] = new Rule(-35, new int[]{44,-36});
    rules[88] = new Rule(-35, new int[]{44,-36,44,-41});
    rules[89] = new Rule(-35, new int[]{44,-36,44,-41,44,-32});
    rules[90] = new Rule(-39, new int[]{});
    rules[91] = new Rule(-39, new int[]{44,-36});
    rules[92] = new Rule(-39, new int[]{44,-36,44,-40});
    rules[93] = new Rule(-39, new int[]{44,-36,44,-40,44,-41});
    rules[94] = new Rule(-39, new int[]{44,-36,44,-40,44,-41,44,-36});
    rules[95] = new Rule(-39, new int[]{44,-36,44,-40,44,-41,44,-36,44,-36});
    rules[96] = new Rule(-36, new int[]{154});
    rules[97] = new Rule(-40, new int[]{});
    rules[98] = new Rule(-40, new int[]{-36});
    rules[99] = new Rule(-32, new int[]{154});
    rules[100] = new Rule(-32, new int[]{153});
    rules[101] = new Rule(-32, new int[]{155});
    rules[102] = new Rule(-32, new int[]{139});
    rules[103] = new Rule(-32, new int[]{131});
    rules[104] = new Rule(-41, new int[]{});
    rules[105] = new Rule(-41, new int[]{-32});
    rules[106] = new Rule(-38, new int[]{153});
    rules[107] = new Rule(-37, new int[]{});
    rules[108] = new Rule(-37, new int[]{150,58});
    rules[109] = new Rule(-37, new int[]{151,40,-42,41,58});
    rules[110] = new Rule(-42, new int[]{-43});
    rules[111] = new Rule(-42, new int[]{-42,124,-43});
    rules[112] = new Rule(-43, new int[]{153});
    rules[113] = new Rule(-4, new int[]{});
    rules[114] = new Rule(-4, new int[]{-13});
    rules[115] = new Rule(-44, new int[]{153});
    rules[116] = new Rule(-44, new int[]{133});
    rules[117] = new Rule(-44, new int[]{147});
    rules[118] = new Rule(-44, new int[]{153,58,-32});
    rules[119] = new Rule(-45, new int[]{-46});
    rules[120] = new Rule(-45, new int[]{-47,-46});
    rules[121] = new Rule(-46, new int[]{-48});
    rules[122] = new Rule(-46, new int[]{-44});
    rules[123] = new Rule(-48, new int[]{40,-13,41});
    rules[124] = new Rule(-47, new int[]{33});
    rules[125] = new Rule(-13, new int[]{-45});
    rules[126] = new Rule(-13, new int[]{-13,-49,-45});
    rules[127] = new Rule(-49, new int[]{124});
    rules[128] = new Rule(-49, new int[]{38});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)StatPropertyTokens.error, (int)StatPropertyTokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // Root -> EXPR_PROPERTIES, Properties
#line 57 "E:\source\repos\BG3_Tran\LSLib\\LS\Stats\Parser\StatProperty.yy"
                                  { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 3: // Root -> EXPR_CONDITIONS, Conditions
#line 58 "E:\source\repos\BG3_Tran\LSLib\\LS\Stats\Parser\StatProperty.yy"
                                  { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 4: // Root -> EXPR_REQUIREMENTS, Requirements
#line 59 "E:\source\repos\BG3_Tran\LSLib\\LS\Stats\Parser\StatProperty.yy"
                                      { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 5: // Requirements -> /* empty */
#line 71 "E:\source\repos\BG3_Tran\LSLib\\LS\Stats\Parser\StatProperty.yy"
                           { CurrentSemanticValue = MakeRequirements(); }
#line default
        break;
      case 6: // Requirements -> UnaryRequirement
#line 72 "E:\source\repos\BG3_Tran\LSLib\\LS\Stats\Parser\StatProperty.yy"
                                { CurrentSemanticValue = AddRequirement(MakeRequirements(), ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 8: // Requirements -> Requirements, ';', UnaryRequirement
#line 74 "E:\source\repos\BG3_Tran\LSLib\\LS\Stats\Parser\StatProperty.yy"
                                                 { CurrentSemanticValue = AddRequirement(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 10: // UnaryRequirement -> '!', Requirement
#line 78 "E:\source\repos\BG3_Tran\LSLib\\LS\Stats\Parser\StatProperty.yy"
                                   { CurrentSemanticValue = MakeNotRequirement(ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 11: // Requirement -> NAME
#line 81 "E:\source\repos\BG3_Tran\LSLib\\LS\Stats\Parser\StatProperty.yy"
                   { CurrentSemanticValue = MakeRequirement(ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 12: // Requirement -> NAME, INTEGER
#line 82 "E:\source\repos\BG3_Tran\LSLib\\LS\Stats\Parser\StatProperty.yy"
                           { CurrentSemanticValue = MakeIntRequirement(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 13: // Requirement -> REQUIREMENT_TAG, TEXT
#line 83 "E:\source\repos\BG3_Tran\LSLib\\LS\Stats\Parser\StatProperty.yy"
                                   { CurrentSemanticValue = MakeTagRequirement(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 14: // Requirement -> REQUIREMENT_TAG, NAME
#line 84 "E:\source\repos\BG3_Tran\LSLib\\LS\Stats\Parser\StatProperty.yy"
                                   { CurrentSemanticValue = MakeTagRequirement(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 15: // Properties -> /* empty */
#line 96 "E:\source\repos\BG3_Tran\LSLib\\LS\Stats\Parser\StatProperty.yy"
                         { CurrentSemanticValue = MakePropertyList(); }
#line default
        break;
      case 16: // Properties -> Property
#line 97 "E:\source\repos\BG3_Tran\LSLib\\LS\Stats\Parser\StatProperty.yy"
                      { CurrentSemanticValue = AddProperty(MakePropertyList(), ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 18: // Properties -> Properties, ';', Property
#line 99 "E:\source\repos\BG3_Tran\LSLib\\LS\Stats\Parser\StatProperty.yy"
                                     { CurrentSemanticValue = AddProperty(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 19: // Property -> PropContext, PropCondition, PropAction
#line 102 "E:\source\repos\BG3_Tran\LSLib\\LS\Stats\Parser\StatProperty.yy"
                                                { CurrentSemanticValue = MakeProperty(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 20: // PropContext -> /* empty */
#line 104 "E:\source\repos\BG3_Tran\LSLib\\LS\Stats\Parser\StatProperty.yy"
              { CurrentSemanticValue = PropertyContext.None; }
#line default
        break;
      case 21: // PropContext -> CTX_SELF, ':'
#line 105 "E:\source\repos\BG3_Tran\LSLib\\LS\Stats\Parser\StatProperty.yy"
                           { CurrentSemanticValue = PropertyContext.Self; }
#line default
        break;
      case 22: // PropContext -> CTX_SELF, ':', PropSelfContext, ':'
#line 106 "E:\source\repos\BG3_Tran\LSLib\\LS\Stats\Parser\StatProperty.yy"
                                               { CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
#line default
        break;
      case 23: // PropContext -> CTX_TARGET, ':'
#line 107 "E:\source\repos\BG3_Tran\LSLib\\LS\Stats\Parser\StatProperty.yy"
                             { CurrentSemanticValue = PropertyContext.Target; }
#line default
        break;
      case 24: // PropContext -> CTX_AOE, ':'
#line 108 "E:\source\repos\BG3_Tran\LSLib\\LS\Stats\Parser\StatProperty.yy"
                          { CurrentSemanticValue = PropertyContext.AoE; }
#line default
        break;
      case 25: // PropSelfContext -> CTX_ON_HIT
#line 111 "E:\source\repos\BG3_Tran\LSLib\\LS\Stats\Parser\StatProperty.yy"
                             { CurrentSemanticValue = PropertyContext.SelfOnHit; }
#line default
        break;
      case 26: // PropSelfContext -> CTX_ON_EQUIP
#line 112 "E:\source\repos\BG3_Tran\LSLib\\LS\Stats\Parser\StatProperty.yy"
                               { CurrentSemanticValue = PropertyContext.SelfOnEquip; }
#line default
        break;
      case 28: // PropCondition -> IF, '(', ConditionExpr, ')', ':'
#line 116 "E:\source\repos\BG3_Tran\LSLib\\LS\Stats\Parser\StatProperty.yy"
                                             { CurrentSemanticValue = ValueStack[ValueStack.Depth-3]; }
#line default
        break;
      case 42: // ActCustomProperty -> ACT_CUSTOM_PROPERTY
#line 134 "E:\source\repos\BG3_Tran\LSLib\\LS\Stats\Parser\StatProperty.yy"
                                        { CurrentSemanticValue = MakeAction(ValueStack[ValueStack.Depth-1], MakeArgumentList()); }
#line default
        break;
      case 43: // ActSurfaceChange -> ACT_SURFACE_CHANGE, SurfaceChangeArgs
#line 135 "E:\source\repos\BG3_Tran\LSLib\\LS\Stats\Parser\StatProperty.yy"
                                                        { CurrentSemanticValue = MakeAction(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 44: // ActGameAction -> ACT_GAME_ACTION, GameActionArgs
#line 136 "E:\source\repos\BG3_Tran\LSLib\\LS\Stats\Parser\StatProperty.yy"
                                               { CurrentSemanticValue = MakeAction(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 45: // ActCreateSurface -> ACT_CREATE_SURFACE, CreateSurfaceArgs
#line 137 "E:\source\repos\BG3_Tran\LSLib\\LS\Stats\Parser\StatProperty.yy"
                                                        { CurrentSemanticValue = MakeAction(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 46: // ActSwapPlaces -> ACT_SWAP_PLACES, SwapPlacesArgs
#line 138 "E:\source\repos\BG3_Tran\LSLib\\LS\Stats\Parser\StatProperty.yy"
                                               { CurrentSemanticValue = MakeAction(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 47: // ActPickup -> ACT_PICKUP, PickupArgs
#line 139 "E:\source\repos\BG3_Tran\LSLib\\LS\Stats\Parser\StatProperty.yy"
                                  { CurrentSemanticValue = MakeAction(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 48: // ActEqualize -> ACT_EQUALIZE, ',', TextArg
#line 141 "E:\source\repos\BG3_Tran\LSLib\\LS\Stats\Parser\StatProperty.yy"
                                       { CurrentSemanticValue = MakeAction(ValueStack[ValueStack.Depth-3], MakeArgumentList(ValueStack[ValueStack.Depth-1])); }
#line default
        break;
      case 49: // ActResurrect -> ACT_RESURRECT, ResurrectArgs
#line 142 "E:\source\repos\BG3_Tran\LSLib\\LS\Stats\Parser\StatProperty.yy"
                                           { CurrentSemanticValue = MakeAction(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 50: // ActSabotage -> ACT_SABOTAGE, SabotageArgs
#line 143 "E:\source\repos\BG3_Tran\LSLib\\LS\Stats\Parser\StatProperty.yy"
                                        { CurrentSemanticValue = MakeAction(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 51: // ActSummon -> ACT_SUMMON, ',', TextArg, SummonOptArgs
#line 144 "E:\source\repos\BG3_Tran\LSLib\\LS\Stats\Parser\StatProperty.yy"
                                                 { CurrentSemanticValue = MakeAction(ValueStack[ValueStack.Depth-4], PrependArgumentList(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1])); }
#line default
        break;
      case 52: // ActForce -> ACT_FORCE, ',', IntArg
#line 145 "E:\source\repos\BG3_Tran\LSLib\\LS\Stats\Parser\StatProperty.yy"
                                { CurrentSemanticValue = MakeAction(ValueStack[ValueStack.Depth-3], MakeArgumentList(ValueStack[ValueStack.Depth-1])); }
#line default
        break;
      case 53: // ActCleanse -> ACT_CLEANSE, ':', NAME
#line 146 "E:\source\repos\BG3_Tran\LSLib\\LS\Stats\Parser\StatProperty.yy"
                                  { CurrentSemanticValue = MakeAction(ValueStack[ValueStack.Depth-3], MakeArgumentList(ValueStack[ValueStack.Depth-1])); }
#line default
        break;
      case 54: // ActStatus -> StatusBoost, StatusName, StatusArgs
#line 147 "E:\source\repos\BG3_Tran\LSLib\\LS\Stats\Parser\StatProperty.yy"
                                              { CurrentSemanticValue = MakeStatusBoost(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 55: // SurfaceChangeArgs -> /* empty */
#line 149 "E:\source\repos\BG3_Tran\LSLib\\LS\Stats\Parser\StatProperty.yy"
                                { CurrentSemanticValue = MakeArgumentList(); }
#line default
        break;
      case 56: // SurfaceChangeArgs -> ',', IntArg
#line 150 "E:\source\repos\BG3_Tran\LSLib\\LS\Stats\Parser\StatProperty.yy"
                               { CurrentSemanticValue = MakeArgumentList(ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 57: // SurfaceChangeArgs -> ',', IntArg, ',', OptionalIntArg
#line 151 "E:\source\repos\BG3_Tran\LSLib\\LS\Stats\Parser\StatProperty.yy"
                                                  { CurrentSemanticValue = MakeArgumentList(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 58: // SurfaceChangeArgs -> ',', IntArg, ',', OptionalIntArg, ',', IntArg
#line 152 "E:\source\repos\BG3_Tran\LSLib\\LS\Stats\Parser\StatProperty.yy"
                                                             { CurrentSemanticValue = MakeArgumentList(ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 59: // SurfaceChangeArgs -> ',', IntArg, ',', OptionalIntArg, ',', IntArg, ',', IntArg
#line 153 "E:\source\repos\BG3_Tran\LSLib\\LS\Stats\Parser\StatProperty.yy"
                                                                        { CurrentSemanticValue = MakeArgumentList(ValueStack[ValueStack.Depth-7], ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 60: // GameActionArgs -> /* empty */
#line 157 "E:\source\repos\BG3_Tran\LSLib\\LS\Stats\Parser\StatProperty.yy"
                             { CurrentSemanticValue = MakeArgumentList(); }
#line default
        break;
      case 61: // GameActionArgs -> ',', IntArg
#line 158 "E:\source\repos\BG3_Tran\LSLib\\LS\Stats\Parser\StatProperty.yy"
                            { CurrentSemanticValue = MakeArgumentList(ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 62: // GameActionArgs -> ',', IntArg, ',', OptionalIntArg
#line 159 "E:\source\repos\BG3_Tran\LSLib\\LS\Stats\Parser\StatProperty.yy"
                                               { CurrentSemanticValue = MakeArgumentList(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 63: // GameActionArgs -> ',', IntArg, ',', OptionalIntArg, ',', OptionalTextArg
#line 160 "E:\source\repos\BG3_Tran\LSLib\\LS\Stats\Parser\StatProperty.yy"
                                                                   { CurrentSemanticValue = MakeArgumentList(ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 64: // GameActionArgs -> ',', IntArg, ',', OptionalIntArg, ',', OptionalTextArg, ',', 
               //                   IntArg
#line 161 "E:\source\repos\BG3_Tran\LSLib\\LS\Stats\Parser\StatProperty.yy"
                                                                              { CurrentSemanticValue = MakeArgumentList(ValueStack[ValueStack.Depth-7], ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 65: // GameActionArgs -> ',', IntArg, ',', OptionalIntArg, ',', OptionalTextArg, ',', 
               //                   IntArg, ',', OptionalIntArg
#line 162 "E:\source\repos\BG3_Tran\LSLib\\LS\Stats\Parser\StatProperty.yy"
                                                                                                 { CurrentSemanticValue = MakeArgumentList(ValueStack[ValueStack.Depth-9], ValueStack[ValueStack.Depth-7], ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 66: // CreateSurfaceArgs -> /* empty */
#line 166 "E:\source\repos\BG3_Tran\LSLib\\LS\Stats\Parser\StatProperty.yy"
                                { CurrentSemanticValue = MakeArgumentList(); }
#line default
        break;
      case 67: // CreateSurfaceArgs -> ',', IntArg
#line 167 "E:\source\repos\BG3_Tran\LSLib\\LS\Stats\Parser\StatProperty.yy"
                               { CurrentSemanticValue = MakeArgumentList(ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 68: // CreateSurfaceArgs -> ',', IntArg, ',', OptionalIntArg
#line 168 "E:\source\repos\BG3_Tran\LSLib\\LS\Stats\Parser\StatProperty.yy"
                                                  { CurrentSemanticValue = MakeArgumentList(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 69: // CreateSurfaceArgs -> ',', IntArg, ',', OptionalIntArg, ',', OptionalTextArg
#line 169 "E:\source\repos\BG3_Tran\LSLib\\LS\Stats\Parser\StatProperty.yy"
                                                                      { CurrentSemanticValue = MakeArgumentList(ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 70: // CreateSurfaceArgs -> ',', IntArg, ',', OptionalIntArg, ',', OptionalTextArg, 
               //                      ',', IntArg
#line 170 "E:\source\repos\BG3_Tran\LSLib\\LS\Stats\Parser\StatProperty.yy"
                                                                                 { CurrentSemanticValue = MakeArgumentList(ValueStack[ValueStack.Depth-7], ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 71: // CreateSurfaceArgs -> ',', IntArg, ',', OptionalIntArg, ',', OptionalTextArg, 
               //                      ',', IntArg, ',', OptionalIntArg
#line 171 "E:\source\repos\BG3_Tran\LSLib\\LS\Stats\Parser\StatProperty.yy"
                                                                                                    { CurrentSemanticValue = MakeArgumentList(ValueStack[ValueStack.Depth-9], ValueStack[ValueStack.Depth-7], ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 72: // SwapPlacesArgs -> /* empty */
#line 175 "E:\source\repos\BG3_Tran\LSLib\\LS\Stats\Parser\StatProperty.yy"
                             { CurrentSemanticValue = MakeArgumentList(); }
#line default
        break;
      case 73: // SwapPlacesArgs -> ',', OptionalIntArg
#line 176 "E:\source\repos\BG3_Tran\LSLib\\LS\Stats\Parser\StatProperty.yy"
                                    { CurrentSemanticValue = MakeArgumentList(ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 74: // SwapPlacesArgs -> ',', OptionalIntArg, ',', OptionalIntArg
#line 177 "E:\source\repos\BG3_Tran\LSLib\\LS\Stats\Parser\StatProperty.yy"
                                                       { CurrentSemanticValue = MakeArgumentList(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 75: // SwapPlacesArgs -> ',', OptionalIntArg, ',', OptionalIntArg, ',', 
               //                   OptionalTextArg
#line 178 "E:\source\repos\BG3_Tran\LSLib\\LS\Stats\Parser\StatProperty.yy"
                                                                           { CurrentSemanticValue = MakeArgumentList(ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 76: // SwapPlacesArgs -> ',', OptionalIntArg, ',', OptionalIntArg, ',', 
               //                   OptionalTextArg, ':', OptionalTextArg
#line 179 "E:\source\repos\BG3_Tran\LSLib\\LS\Stats\Parser\StatProperty.yy"
                                                                                               { CurrentSemanticValue = MakeArgumentList(ValueStack[ValueStack.Depth-7], ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 77: // PickupArgs -> /* empty */
#line 183 "E:\source\repos\BG3_Tran\LSLib\\LS\Stats\Parser\StatProperty.yy"
                         { CurrentSemanticValue = MakeArgumentList(); }
#line default
        break;
      case 78: // PickupArgs -> ',', OptionalIntArg
#line 184 "E:\source\repos\BG3_Tran\LSLib\\LS\Stats\Parser\StatProperty.yy"
                                { CurrentSemanticValue = MakeArgumentList(ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 79: // PickupArgs -> ',', OptionalIntArg, ',', OptionalIntArg
#line 185 "E:\source\repos\BG3_Tran\LSLib\\LS\Stats\Parser\StatProperty.yy"
                                                   { CurrentSemanticValue = MakeArgumentList(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 80: // PickupArgs -> ',', OptionalIntArg, ',', OptionalIntArg, ',', OptionalTextArg
#line 186 "E:\source\repos\BG3_Tran\LSLib\\LS\Stats\Parser\StatProperty.yy"
                                                                       { CurrentSemanticValue = MakeArgumentList(ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 81: // ResurrectArgs -> /* empty */
#line 189 "E:\source\repos\BG3_Tran\LSLib\\LS\Stats\Parser\StatProperty.yy"
                            { CurrentSemanticValue = MakeArgumentList(); }
#line default
        break;
      case 82: // ResurrectArgs -> ',', IntArg
#line 190 "E:\source\repos\BG3_Tran\LSLib\\LS\Stats\Parser\StatProperty.yy"
                           { CurrentSemanticValue = MakeArgumentList(ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 83: // ResurrectArgs -> ',', IntArg, ',', IntArg
#line 191 "E:\source\repos\BG3_Tran\LSLib\\LS\Stats\Parser\StatProperty.yy"
                                      { CurrentSemanticValue = MakeArgumentList(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 84: // SabotageArgs -> /* empty */
#line 194 "E:\source\repos\BG3_Tran\LSLib\\LS\Stats\Parser\StatProperty.yy"
                           { CurrentSemanticValue = MakeArgumentList(); }
#line default
        break;
      case 85: // SabotageArgs -> ',', IntArg
#line 195 "E:\source\repos\BG3_Tran\LSLib\\LS\Stats\Parser\StatProperty.yy"
                          { CurrentSemanticValue = MakeArgumentList(ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 86: // SummonOptArgs -> /* empty */
#line 199 "E:\source\repos\BG3_Tran\LSLib\\LS\Stats\Parser\StatProperty.yy"
                            { CurrentSemanticValue = MakeArgumentList(); }
#line default
        break;
      case 87: // SummonOptArgs -> ',', IntArg
#line 200 "E:\source\repos\BG3_Tran\LSLib\\LS\Stats\Parser\StatProperty.yy"
                           { CurrentSemanticValue = MakeArgumentList(ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 88: // SummonOptArgs -> ',', IntArg, ',', OptionalTextArg
#line 201 "E:\source\repos\BG3_Tran\LSLib\\LS\Stats\Parser\StatProperty.yy"
                                               { CurrentSemanticValue = MakeArgumentList(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 89: // SummonOptArgs -> ',', IntArg, ',', OptionalTextArg, ',', TextArg
#line 202 "E:\source\repos\BG3_Tran\LSLib\\LS\Stats\Parser\StatProperty.yy"
                                                           { CurrentSemanticValue = MakeArgumentList(ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 90: // StatusArgs -> /* empty */
#line 205 "E:\source\repos\BG3_Tran\LSLib\\LS\Stats\Parser\StatProperty.yy"
                         { CurrentSemanticValue = MakeArgumentList(); }
#line default
        break;
      case 91: // StatusArgs -> ',', IntArg
#line 206 "E:\source\repos\BG3_Tran\LSLib\\LS\Stats\Parser\StatProperty.yy"
                        { CurrentSemanticValue = MakeArgumentList(ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 92: // StatusArgs -> ',', IntArg, ',', OptionalIntArg
#line 207 "E:\source\repos\BG3_Tran\LSLib\\LS\Stats\Parser\StatProperty.yy"
                                           { CurrentSemanticValue = MakeArgumentList(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 93: // StatusArgs -> ',', IntArg, ',', OptionalIntArg, ',', OptionalTextArg
#line 208 "E:\source\repos\BG3_Tran\LSLib\\LS\Stats\Parser\StatProperty.yy"
                                                               { CurrentSemanticValue = MakeArgumentList(ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 94: // StatusArgs -> ',', IntArg, ',', OptionalIntArg, ',', OptionalTextArg, ',', 
               //               IntArg
#line 209 "E:\source\repos\BG3_Tran\LSLib\\LS\Stats\Parser\StatProperty.yy"
                                                                          { CurrentSemanticValue = MakeArgumentList(ValueStack[ValueStack.Depth-7], ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 95: // StatusArgs -> ',', IntArg, ',', OptionalIntArg, ',', OptionalTextArg, ',', 
               //               IntArg, ',', IntArg
#line 210 "E:\source\repos\BG3_Tran\LSLib\\LS\Stats\Parser\StatProperty.yy"
                                                                                     { CurrentSemanticValue = MakeArgumentList(ValueStack[ValueStack.Depth-9], ValueStack[ValueStack.Depth-7], ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 96: // IntArg -> INTEGER
#line 213 "E:\source\repos\BG3_Tran\LSLib\\LS\Stats\Parser\StatProperty.yy"
                 { CurrentSemanticValue = Int32.Parse(ValueStack[ValueStack.Depth-1] as string); }
#line default
        break;
      case 104: // OptionalTextArg -> /* empty */
#line 226 "E:\source\repos\BG3_Tran\LSLib\\LS\Stats\Parser\StatProperty.yy"
                              { CurrentSemanticValue = ""; }
#line default
        break;
      case 107: // StatusBoost -> /* empty */
#line 232 "E:\source\repos\BG3_Tran\LSLib\\LS\Stats\Parser\StatProperty.yy"
                          { CurrentSemanticValue = MakeStatusBoostType(StatusBoostType.None, null); }
#line default
        break;
      case 108: // StatusBoost -> ACT_AOEBOOST, ':'
#line 233 "E:\source\repos\BG3_Tran\LSLib\\LS\Stats\Parser\StatProperty.yy"
                               { CurrentSemanticValue = MakeStatusBoostType(StatusBoostType.AoE, null); }
#line default
        break;
      case 109: // StatusBoost -> ACT_SURFACEBOOST, '(', SurfaceList, ')', ':'
#line 234 "E:\source\repos\BG3_Tran\LSLib\\LS\Stats\Parser\StatProperty.yy"
                                                       { CurrentSemanticValue = MakeStatusBoostType(StatusBoostType.Surface, ValueStack[ValueStack.Depth-3]); }
#line default
        break;
      case 110: // SurfaceList -> Surface
#line 237 "E:\source\repos\BG3_Tran\LSLib\\LS\Stats\Parser\StatProperty.yy"
                      { CurrentSemanticValue = AddSurface(MakeSurfaceList(), ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 111: // SurfaceList -> SurfaceList, '|', Surface
#line 238 "E:\source\repos\BG3_Tran\LSLib\\LS\Stats\Parser\StatProperty.yy"
                                      { CurrentSemanticValue = AddSurface(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 112: // Surface -> NAME
#line 241 "E:\source\repos\BG3_Tran\LSLib\\LS\Stats\Parser\StatProperty.yy"
               { CurrentSemanticValue = MakeSurface(ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 115: // Condition -> NAME
#line 255 "E:\source\repos\BG3_Tran\LSLib\\LS\Stats\Parser\StatProperty.yy"
                 { CurrentSemanticValue = MakeCondition(ValueStack[ValueStack.Depth-1], null); }
#line default
        break;
      case 116: // Condition -> CTX_SELF
#line 256 "E:\source\repos\BG3_Tran\LSLib\\LS\Stats\Parser\StatProperty.yy"
                     { CurrentSemanticValue = MakeCondition("Self", null); }
#line default
        break;
      case 117: // Condition -> ACT_SUMMON
#line 257 "E:\source\repos\BG3_Tran\LSLib\\LS\Stats\Parser\StatProperty.yy"
                       { CurrentSemanticValue = MakeCondition(ValueStack[ValueStack.Depth-1], null); }
#line default
        break;
      case 118: // Condition -> NAME, ':', TextArg
#line 258 "E:\source\repos\BG3_Tran\LSLib\\LS\Stats\Parser\StatProperty.yy"
                             { CurrentSemanticValue = MakeCondition(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 120: // UnaryCondition -> UnaryOperator, ConditionBlock
#line 262 "E:\source\repos\BG3_Tran\LSLib\\LS\Stats\Parser\StatProperty.yy"
                                              { CurrentSemanticValue = MakeNotCondition(ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 123: // BracketedConditionExpr -> '(', ConditionExpr, ')'
#line 269 "E:\source\repos\BG3_Tran\LSLib\\LS\Stats\Parser\StatProperty.yy"
                                               { CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
#line default
        break;
      case 126: // ConditionExpr -> ConditionExpr, BinaryOperator, UnaryCondition
#line 274 "E:\source\repos\BG3_Tran\LSLib\\LS\Stats\Parser\StatProperty.yy"
                                                            { CurrentSemanticValue = MakeBinaryCondition(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 127: // BinaryOperator -> '|'
#line 277 "E:\source\repos\BG3_Tran\LSLib\\LS\Stats\Parser\StatProperty.yy"
                     { CurrentSemanticValue = ConditionOperator.Or; }
#line default
        break;
      case 128: // BinaryOperator -> '&'
#line 278 "E:\source\repos\BG3_Tran\LSLib\\LS\Stats\Parser\StatProperty.yy"
                     { CurrentSemanticValue = ConditionOperator.And; }
#line default
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((StatPropertyTokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((StatPropertyTokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

}
}
